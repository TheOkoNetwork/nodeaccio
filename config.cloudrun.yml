# path to a directory with all packages
store:
  google-cloud:
    ## google project id
    projectId: provisionier

    ## namespace for metadata database
    kind: nodeacciometadatanamespace

    ## this pluging do not create the bucket, it has to exist
    bucket: nodeaccio

    ## google cloud recommend this file only for development
    ## this field is not mandatory
    keyFilename: key.json

    ## default validation is, it can be overrided by
    ## https://cloud.google.com/nodejs/docs/reference/storage/1.6.x/File.html#createWriteStream
    # validation: crc32c

    ## Enable/disable resumable uploads to GC Storage
    ## By default it's enabled in `@google-cloud/storage`
    ## May cause failures for small package uploads so it is recommended to set it to `false`
    ## @see https://stackoverflow.com/questions/53172050/google-cloud-storage-invalid-upload-request-error-bad-request
    resumable: true

# path to a directory with plugins to include
plugins: ./plugins

listen:
  0.0.0.0:8080

max_body_size: 1000mb

web:
  title: Nodeaccio
  darkMode: true

auth:
  verdaccio-gcpip:

# a list of other known repositories we can talk to
uplinks:
  npmjs:
    url: https://registry.npmjs.org/

packages:
  '@*/*':
    # scoped packages
    access: $authenticated
    publish: $authenticated
    unpublish: $authenticated
    #proxy: npmjs

  '**':
    # allow all users (including non-authenticated users) to read and
    # publish all packages
    #
    # you can specify usernames/groupnames (depending on your auth plugin)
    # and three keywords: "$all", "$anonymous", "$authenticated"
    access: $authenticated

    # allow all known users to publish/publish packages
    # (anyone can register by default, remember?)
    publish: $authenticated
    unpublish: $authenticated

    # if package is not available locally, proxy requests to 'npmjs' registry
    #proxy: npmjs

# You can specify HTTP/1.1 server keep alive timeout in seconds for incoming connections.
# A value of 0 makes the http server behave similarly to Node.js versions prior to 8.0.0, which did not have a keep-alive timeout.
# WORKAROUND: Through given configuration you can workaround following issue https://github.com/verdaccio/verdaccio/issues/301. Set to 0 in case 60 is not enough.
server:
  keepAliveTimeout: 60

middlewares:
  audit:
    enabled: true

# log settings
logs:
  - { type: stdout, format: pretty, level: http }
  #- {type: file, path: verdaccio.log, level: info}
#experiments:
#  # support for npm token command
#  token: false
#  # support for the new v1 search endpoint, functional by incomplete read more on ticket 1732
#  search: false
#  # disable writing body size to logs, read more on ticket 1912
#  bytesin_off: false

# This affect the web and api (not developed yet)
#i18n:
#web: en-US
